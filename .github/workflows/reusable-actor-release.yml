name: Reusable Actor Release

on:
  workflow_call:
    inputs:
      actor-name:
        description: 'Name of the actor (used for file naming)'
        required: true
        type: string
      rust-toolchain:
        description: 'Rust toolchain version'
        required: false
        type: string
        default: 'stable'
      wasm-target:
        description: 'WASM target'
        required: false
        type: string
        default: 'wasm32-unknown-unknown'
      cargo-component-version:
        description: 'cargo-component version to install'
        required: false
        type: string
        default: 'latest'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.rust-toolchain }}
          target: ${{ inputs.wasm-target }}
          override: true
          
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo-component
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/cargo-component
          key: ${{ runner.os }}-cargo-component-${{ inputs.cargo-component-version }}
          
      - name: Install cargo-component
        run: |
          if ! command -v cargo-component &> /dev/null; then
            if [ "${{ inputs.cargo-component-version }}" = "latest" ]; then
              cargo install cargo-component
            else
              cargo install cargo-component --version ${{ inputs.cargo-component-version }}
            fi
          fi
          
      - name: Build WASM component
        run: |
          cargo component build --release --target ${{ inputs.wasm-target }}
          
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Auto-detect actor binary name
        id: binary-name
        run: |
          # Try to find the WASM file in target directory
          WASM_FILE=$(find target/${{ inputs.wasm-target }}/release/ -name "*.wasm" -not -path "*/deps/*" | head -1)
          if [ -z "$WASM_FILE" ]; then
            echo "No WASM file found! Using fallback naming."
            BINARY_NAME="${{ inputs.actor-name }}"
          else
            BINARY_NAME=$(basename "$WASM_FILE" .wasm)
          fi
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_OUTPUT
          echo "Detected binary name: $BINARY_NAME"
        
      - name: Prepare release assets
        run: |
          # Copy and rename files for release
          cp target/${{ inputs.wasm-target }}/release/${{ steps.binary-name.outputs.BINARY_NAME }}.wasm ${{ inputs.actor-name }}-component.wasm
          
          # Create updated manifest with GitHub URLs
          cp manifest.toml ${{ inputs.actor-name }}-manifest.toml
          
          # Update the manifest to use GitHub release URLs instead of local paths
          sed -i "s|component = \".*\"|component = \"https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/${{ inputs.actor-name }}-component.wasm\"|" ${{ inputs.actor-name }}-manifest.toml
          sed -i "s|version = \".*\"|version = \"${{ steps.version.outputs.VERSION }}\"|" ${{ inputs.actor-name }}-manifest.toml
          
      - name: Verify release assets
        run: |
          echo "Release assets prepared:"
          ls -la ${{ inputs.actor-name }}-*
          echo ""
          echo "Updated manifest contents:"
          cat ${{ inputs.actor-name }}-manifest.toml
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ inputs.actor-name }}-component.wasm
            ${{ inputs.actor-name }}-manifest.toml
          body: |
            ## ${{ inputs.actor-name }} Actor Release ${{ steps.version.outputs.VERSION }}
            
            This release contains:
            - `${{ inputs.actor-name }}-component.wasm` - The WebAssembly component
            - `${{ inputs.actor-name }}-manifest.toml` - The actor manifest with updated URLs
            
            ### Usage
            To use this actor, reference the manifest URL:
            ```
            https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/${{ inputs.actor-name }}-manifest.toml
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
