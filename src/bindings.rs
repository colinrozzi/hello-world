// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod ntwk {
    pub mod theater {
        /// # Common Type Definitions
        ///
        /// Defines shared types used across multiple interfaces in the Theater system.
        /// This interface serves as a central location for type definitions to ensure
        /// consistency and avoid duplication.
        ///
        /// ## Purpose
        ///
        /// The types interface provides common data structures and type aliases used
        /// throughout the Theater system. These types represent core concepts such as:
        ///
        /// - Message formats
        /// - Event chain structures
        /// - Identifiers
        ///
        /// By centralizing these definitions, the system maintains type consistency
        /// across different interfaces and components.
        ///
        /// ## Example
        ///
        /// These types are typically imported and used in actor implementations:
        ///
        /// ```rust
        /// use ntwk::theater::types::actor_id;
        ///
        /// // Using actor-id for referring to actors
        /// fn get_actor_info(id: actor_id) -> String {
        ///     format!("Info for actor {}", id)
        /// }
        /// ```
        ///
        /// ## Implementation Notes
        ///
        /// - Most types are designed to be serialization-format agnostic
        /// - The `list<u8>` (byte array) representation allows for flexible serialization
        /// - Actors typically use serde-compatible formats for serialization/deserialization
        /// Define a shared type for messages
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Core event structure
            ///
            /// Represents a single event in an actor's history, including its type,
            /// parent reference, and associated data.
            #[derive(Clone)]
            pub struct Event {
                /// Type of event (e.g., "http", "message", "wasm")
                pub event_type: _rt::String,
                /// Optional reference to parent event (previous in chain)
                pub parent: Option<u64>,
                /// Serialized event data
                pub data: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Event")
                        .field("event-type", &self.event_type)
                        .field("parent", &self.parent)
                        .field("data", &self.data)
                        .finish()
                }
            }
            /// Event with associated metadata
            ///
            /// Represents a single event in the chain with its metadata (hash),
            /// allowing for verification and referencing.
            #[derive(Clone)]
            pub struct MetaEvent {
                /// Hash of the event, used for verification and referencing
                pub hash: u64,
                /// The actual event data
                pub event: Event,
            }
            impl ::core::fmt::Debug for MetaEvent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("MetaEvent")
                        .field("hash", &self.hash)
                        .field("event", &self.event)
                        .finish()
                }
            }
            /// Complete event chain for an actor
            ///
            /// Represents the full history of events that have occurred in an actor,
            /// providing traceability and auditability.
            #[derive(Clone)]
            pub struct Chain {
                /// List of events in the chain, each with metadata
                pub events: _rt::Vec<MetaEvent>,
            }
            impl ::core::fmt::Debug for Chain {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Chain").field("events", &self.events).finish()
                }
            }
            /// Actor error
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum WitErrorType {
                OperationTimeout,
                ChannelClosed,
                ShuttingDown,
                FunctionNotFound,
                TypeMismatch,
                Internal,
                SerializationError,
                UpdateComponentError,
                Paused,
            }
            impl ::core::fmt::Debug for WitErrorType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitErrorType::OperationTimeout => {
                            f.debug_tuple("WitErrorType::OperationTimeout").finish()
                        }
                        WitErrorType::ChannelClosed => {
                            f.debug_tuple("WitErrorType::ChannelClosed").finish()
                        }
                        WitErrorType::ShuttingDown => {
                            f.debug_tuple("WitErrorType::ShuttingDown").finish()
                        }
                        WitErrorType::FunctionNotFound => {
                            f.debug_tuple("WitErrorType::FunctionNotFound").finish()
                        }
                        WitErrorType::TypeMismatch => {
                            f.debug_tuple("WitErrorType::TypeMismatch").finish()
                        }
                        WitErrorType::Internal => {
                            f.debug_tuple("WitErrorType::Internal").finish()
                        }
                        WitErrorType::SerializationError => {
                            f.debug_tuple("WitErrorType::SerializationError").finish()
                        }
                        WitErrorType::UpdateComponentError => {
                            f.debug_tuple("WitErrorType::UpdateComponentError").finish()
                        }
                        WitErrorType::Paused => {
                            f.debug_tuple("WitErrorType::Paused").finish()
                        }
                    }
                }
            }
            impl WitErrorType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WitErrorType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => WitErrorType::OperationTimeout,
                        1 => WitErrorType::ChannelClosed,
                        2 => WitErrorType::ShuttingDown,
                        3 => WitErrorType::FunctionNotFound,
                        4 => WitErrorType::TypeMismatch,
                        5 => WitErrorType::Internal,
                        6 => WitErrorType::SerializationError,
                        7 => WitErrorType::UpdateComponentError,
                        8 => WitErrorType::Paused,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
        }
        /// # Runtime Interface
        ///
        /// The `runtime` interface provides core runtime capabilities to actors in the Theater system.
        /// It allows actors to access their environment, log messages, and retrieve their event chain.
        ///
        /// ## Purpose
        ///
        /// This interface serves as a bridge between the actor and its execution environment,
        /// providing essential services for operation, debugging, and state management. It enables
        /// actors to log information to the system and access their immutable event history.
        ///
        /// ## Example
        ///
        /// ```wit
        /// // Using the runtime interface in a WIT definition
        /// use ntwk:theater/runtime;
        ///
        /// // Using the runtime interface in a Rust implementation
        /// runtime::log("Actor initialized successfully");
        /// let my_chain = runtime::get_chain();
        /// ```
        ///
        /// ## Security
        ///
        /// The runtime interface is designed to be safe to expose to all actors, as it provides
        /// only read access to state and controlled logging functionality. It doesn't allow actors
        /// to modify runtime state or access system resources outside their sandbox.
        ///
        /// ## Implementation Notes
        ///
        /// This interface is typically implemented by the Theater runtime and automatically
        /// provided to all actors. No special configuration is required to use it, though
        /// logging behavior can be controlled through manifest settings.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod runtime {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Chain = super::super::super::ntwk::theater::types::Chain;
            #[allow(unused_unsafe, clippy::all)]
            /// Logs a message to the actor's log stream.
            ///
            /// ## Purpose
            ///
            /// This function allows actors to send log messages to the Theater logging system.
            /// Messages are tagged with the actor's ID and can be viewed through the Theater CLI
            /// or event subscription system.
            ///
            /// ## Parameters
            ///
            /// * `msg` - The message to log
            ///
            /// ## Example
            ///
            /// ```rust
            /// // In Rust actor code
            /// runtime::log("Processing request with ID: 12345");
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// Log messages are subject to the logging level configuration specified in the actor's
            /// manifest. The Theater runtime may filter or redirect logs based on this configuration.
            pub fn log(msg: &str) -> () {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "ntwk:theater/runtime")]
                    unsafe extern "C" {
                        #[link_name = "log"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Retrieves the actor's event chain.
            ///
            /// ## Purpose
            ///
            /// This function provides access to the actor's complete event history as a chain of
            /// cryptographically linked events. This allows actors to inspect their state evolution
            /// and verify the integrity of their history.
            ///
            /// ## Returns
            ///
            /// * `chain` - The actor's event chain containing all recorded events
            ///
            /// ## Example
            ///
            /// ```rust
            /// // In Rust actor code
            /// let chain = runtime::get_chain();
            ///
            /// // Count events by type
            /// let mut event_counts = std::collections::HashMap::new();
            /// for event in chain.events {
            ///     *event_counts.entry(event.event_type.clone()).or_insert(0) += 1;
            /// }
            /// ```
            ///
            /// ## Security
            ///
            /// The event chain is immutable and cryptographically verifiable, ensuring that actors
            /// cannot tamper with their event history. This provides a secure audit trail of all
            /// actor actions.
            pub fn get_chain() -> Chain {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "ntwk:theater/runtime")]
                    unsafe extern "C" {
                        #[link_name = "get-chain"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base13 = l2;
                    let len13 = l3;
                    let mut result13 = _rt::Vec::with_capacity(len13);
                    for i in 0..len13 {
                        let base = base13
                            .add(i * (24 + 4 * ::core::mem::size_of::<*const u8>()));
                        let e13 = {
                            let l4 = *base.add(0).cast::<i64>();
                            let l5 = *base.add(8).cast::<*mut u8>();
                            let l6 = *base
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = i32::from(
                                *base
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l10 = *base
                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l11 = *base
                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len12 = l11;
                            super::super::super::ntwk::theater::types::MetaEvent {
                                hash: l4 as u64,
                                event: super::super::super::ntwk::theater::types::Event {
                                    event_type: _rt::string_lift(bytes7),
                                    parent: match l8 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l9 = *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>();
                                                l9 as u64
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    data: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                                },
                            }
                        };
                        result13.push(e13);
                    }
                    _rt::cabi_dealloc(
                        base13,
                        len13 * (24 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result14 = super::super::super::ntwk::theater::types::Chain {
                        events: result13,
                    };
                    result14
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn shutdown(data: Option<&[u8]>) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let (result1_0, result1_1, result1_2) = match data {
                        Some(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (1i32, ptr0.cast_mut(), len0)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "ntwk:theater/runtime")]
                    unsafe extern "C" {
                        #[link_name = "shutdown"]
                        fn wit_import3(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import3(result1_0, result1_1, result1_2, ptr2) };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result8 = match l4 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod ntwk {
        pub mod theater {
            /// # Actor Interface
            ///
            /// Defines the core interface that all Theater actors must implement. This is the
            /// fundamental contract between the Theater runtime and WebAssembly actor components.
            ///
            /// ## Purpose
            ///
            /// The actor interface establishes the minimal required functionality for a component
            /// to be recognized and managed as a Theater actor. By implementing this interface,
            /// a WebAssembly component can be:
            ///
            /// - Loaded by the Theater runtime
            /// - Initialized with state and parameters
            /// - Managed within the supervision hierarchy
            /// - Integrated with the event chain system
            ///
            /// This interface is deliberately minimal to make it as easy as possible to create
            /// compatible actors, while still providing the core functionality needed for the
            /// Theater system to manage them.
            ///
            /// ## Example
            ///
            /// Here's how a typical actor would implement this interface in Rust:
            ///
            /// ```rust
            /// use ntwk::theater::actor::Guest;
            /// use ntwk::theater::types::State;
            ///
            /// struct MyActor;
            ///
            /// impl Guest for MyActor {
            ///     fn init(state: State, params: (String,)) -> Result<(State,), String> {
            ///         // Parse the initial parameters
            ///         let (actor_id,) = params;
            ///         println!("Initializing actor with ID: {}", actor_id);
            ///
            ///         // Create initial state if none exists
            ///         let new_state = match state {
            ///             Some(existing) => {
            ///                 // Use existing state
            ///                 existing
            ///             }
            ///             None => {
            ///                 // Create new initial state
            ///                 let initial_data = MyActorState {
            ///                     counter: 0,
            ///                     last_updated: chrono::Utc::now(),
            ///                 };
            ///                 serde_json::to_vec(&initial_data).map_err(|e| e.to_string())?
            ///             }
            ///         };
            ///
            ///         // Return the new state
            ///         Ok((new_state,))
            ///     }
            /// }
            /// ```
            ///
            /// ## Security
            ///
            /// This interface is the primary entry point for actor execution. The Theater runtime
            /// ensures that actors can only access resources they have been explicitly granted
            /// through handler configurations.
            ///
            /// ## Implementation Notes
            ///
            /// - The state parameter is passed as a blob of bytes, typically serialized/deserialized
            ///   using formats like JSON, MessagePack, or bincode.
            /// - Actors are responsible for managing their own state format and serialization.
            /// - The parameters tuple allows for flexible initialization with a variety of data types.
            /// - Returning an error string from the init function will cause the actor to fail to start.
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod actor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::init(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (_rt::string_lift(bytes1),),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_init<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// # Initialize the actor
                    ///
                    /// Called when the actor is first started or restarted. This function is responsible
                    /// for setting up the actor's initial state and responding to initialization parameters.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - Current state of the actor, or None if first initialization
                    /// * `params` - Tuple of initialization parameters, typically including actor ID
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((state,))` - The updated state to store
                    /// * `Err(string)` - An error message if initialization fails
                    ///
                    /// ## Implementation Notes
                    ///
                    /// - If state is None, the actor should create a new initial state
                    /// - If state contains data, the actor should validate and use that state
                    /// - The first parameter in the tuple is typically the actor's ID
                    /// - Any error returned will cause the actor to fail to start
                    fn init(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String,),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_ntwk_theater_actor_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "ntwk:theater/actor#init")] unsafe extern "C" fn export_init(arg0
                        : i32, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 :
                        usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_init_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4) } }
                        #[unsafe (export_name = "cabi_post_ntwk:theater/actor#init")]
                        unsafe extern "C" fn _post_return_init(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_init::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_ntwk_theater_actor_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_hello_world_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::ntwk::theater::actor::__export_ntwk_theater_actor_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::ntwk::theater::actor);
    };
}
#[doc(inline)]
pub(crate) use __export_hello_world_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:ntwk:theater:hello-world:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 878] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xec\x05\x01A\x02\x01\
A\x08\x01B\x16\x01s\x04\0\x08actor-id\x03\0\0\x01s\x04\0\x0achannel-id\x03\0\x02\
\x01p}\x01k\x04\x01r\x02\x08accepted\x7f\x07message\x05\x04\0\x0echannel-accept\x03\
\0\x06\x01kw\x01r\x03\x0aevent-types\x06parent\x08\x04data\x04\x04\0\x05event\x03\
\0\x09\x01r\x02\x04hashw\x05event\x0a\x04\0\x0ameta-event\x03\0\x0b\x01p\x0c\x01\
r\x01\x06events\x0d\x04\0\x05chain\x03\0\x0e\x01r\x05\x04hash\x04\x0bparent-hash\
\x05\x0aevent-types\x04data\x04\x09timestampw\x04\0\x0bchain-event\x03\0\x10\x01\
m\x09\x11operation-timeout\x0echannel-closed\x0dshutting-down\x12function-not-fo\
und\x0dtype-mismatch\x08internal\x13serialization-error\x16update-component-erro\
r\x06paused\x04\0\x0ewit-error-type\x03\0\x12\x01r\x02\x0aerror-type\x13\x04data\
\x05\x04\0\x0fwit-actor-error\x03\0\x14\x03\0\x12ntwk:theater/types\x05\0\x02\x03\
\0\0\x05chain\x02\x03\0\0\x08actor-id\x01B\x0d\x02\x03\x02\x01\x01\x04\0\x05chai\
n\x03\0\0\x02\x03\x02\x01\x02\x04\0\x08actor-id\x03\0\x02\x01@\x01\x03msgs\x01\0\
\x04\0\x03log\x01\x04\x01@\0\0\x01\x04\0\x09get-chain\x01\x05\x01p}\x01k\x06\x01\
j\0\x01s\x01@\x01\x04data\x07\0\x08\x04\0\x08shutdown\x01\x09\x03\0\x14ntwk:thea\
ter/runtime\x05\x03\x01B\x07\x01p}\x01k\0\x01o\x01s\x01o\x01\x01\x01j\x01\x03\x01\
s\x01@\x02\x05state\x01\x06params\x02\0\x04\x04\0\x04init\x01\x05\x04\0\x12ntwk:\
theater/actor\x05\x04\x04\0\x18ntwk:theater/hello-world\x04\0\x0b\x11\x01\0\x0bh\
ello-world\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070\
.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
